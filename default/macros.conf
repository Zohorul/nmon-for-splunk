
#########################################
#	LPAR Specific definitions
#########################################

[lpar_define_conso]
definition = eval lpar_ecconso=round(((EC_User_PCT+EC_Sys_PCT+EC_Wait_PCT+EC_Idle_PCT)*entitled/100),2)\
| eval lpar_ec_pct_conso=round((((EC_User_PCT+EC_Sys_PCT+EC_Wait_PCT+EC_Idle_PCT)*entitled)/virtualCPUs),2)\
| eval lpar_vpconso=round(((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT)*virtualCPUs/100),2)\
| eval lpar_vp_pct_conso=round((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT),2)\
| eval pool_conso=round((poolCPUs-PoolIdle),2)\
| eval pool_pct_conso=round(((poolCPUs-PoolIdle)*poolCPUs/100),2)
iseval = 0


#########################################
#	Custom Span Macro Definition
#########################################

######################
# 1 mn data interval #
######################

# Use These custom span macros if your minimal interval data >=1mn
# JScharting is limited to 1000 points, so this is a method to be as closed as possible to this limit

[inline_customspan]
definition = [ search index=nmon | head 1 | addinfo\
| eval earliest=if(info_min_time == "0.000", info_search_time,info_min_time)\
| eval latest=if(info_max_time == "+Infinity", info_search_time,info_max_time)\
| eval searchStartTIme=strftime(earliest,"%a %d %B %Y %H:%M")\
| eval searchEndTime=strftime(latest,"%a %d %B %Y %H:%M")\
| eval Difference = (latest - earliest)\
| eval span=case(\
Difference > (3000*24*60*60),"4d",\
Difference > (2000*24*60*60),"3d",\
Difference > (1000*24*60*60),"2d",\
Difference > (500*24*60*60),"1d",\
Difference > (333*24*60*60),"12h",\
Difference > (166*24*60*60),"8h",\
Difference > (83*24*60*60),"4h",\
Difference > (41*24*60*60),"2h",\
Difference > (916*60*60),"1h",\
Difference > (833*60*60),"55m",\
Difference > (750*60*60),"50m",\
Difference > (666*60*60),"45m",\
Difference > (583*60*60),"40m",\
Difference > (500*60*60),"35m",\
Difference > (416*60*60),"30m",\
Difference > (333*60*60),"25m",\
Difference > (250*60*60),"20m",\
Difference > (166*60*60),"15m",\
Difference > (83*60*60),"10m",\
Difference > (66*60*60),"5m",\
Difference > (50*60*60),"4m",\
Difference > (33*60*60),"3m",\
Difference > (16*60*60),"2m",\
Difference <= (16*60*60),"1m"\
)\
| return span ]
iseval = 0

# Inline version used in django views

[inline_customspan_django]
definition = head 1 | addinfo\
| eval earliest=if(info_min_time == "0.000", info_search_time,info_min_time)\
| eval latest=if(info_max_time == "+Infinity", info_search_time,info_max_time)\
| eval searchStartTIme=strftime(earliest,"%a %d %B %Y %H:%M")\
| eval searchEndTime=strftime(latest,"%a %d %B %Y %H:%M")\
| eval Difference = (latest - earliest)\
| eval span=case(\
Difference > (3000*24*60*60),"4d",\
Difference > (2000*24*60*60),"3d",\
Difference > (1000*24*60*60),"2d",\
Difference > (500*24*60*60),"1d",\
Difference > (333*24*60*60),"12h",\
Difference > (166*24*60*60),"8h",\
Difference > (83*24*60*60),"4h",\
Difference > (41*24*60*60),"2h",\
Difference > (916*60*60),"1h",\
Difference > (833*60*60),"55m",\
Difference > (750*60*60),"50m",\
Difference > (666*60*60),"45m",\
Difference > (583*60*60),"40m",\
Difference > (500*60*60),"35m",\
Difference > (416*60*60),"30m",\
Difference > (333*60*60),"25m",\
Difference > (250*60*60),"20m",\
Difference > (166*60*60),"15m",\
Difference > (83*60*60),"10m",\
Difference > (66*60*60),"5m",\
Difference > (50*60*60),"4m",\
Difference > (33*60*60),"3m",\
Difference > (16*60*60),"2m",\
Difference <= (16*60*60),"1m"\
)
iseval = 0


######################
# 5 mn data interval #
######################

# Use These custom span macros if your minimal interval data is <=5mn
# JScharting is limited to 1000 points, so this is a method to be as closed as possible to this limit

#[inline_customspan]
#definition = [ search index=nmon | head 1 | addinfo\
#| eval earliest=if(info_min_time == "0.000", info_search_time,info_min_time)\
#| eval latest=if(info_max_time == "+Infinity", info_search_time,info_max_time)\
#| eval searchStartTIme=strftime(earliest,"%a %d %B %Y %H:%M")\
#| eval searchEndTime=strftime(latest,"%a %d %B %Y %H:%M")\
#| eval Difference = (latest - earliest)\
#| eval span=case(\
#Difference > (3000*24*60*60),"4d",\
#Difference > (2000*24*60*60),"3d",\
#Difference > (1000*24*60*60),"2d",\
#Difference > (500*24*60*60),"1d",\
#Difference > (333*24*60*60),"12h",\
#Difference > (166*24*60*60),"8h",\
#Difference > (83*24*60*60),"4h",\
#Difference > (41*24*60*60),"2h",\
#Difference > (916*60*60),"1h",\
#Difference > (833*60*60),"55m",\
#Difference > (750*60*60),"50m",\
#Difference > (666*60*60),"45m",\
#Difference > (583*60*60),"40m",\
#Difference > (500*60*60),"35m",\
#Difference > (416*60*60),"30m",\
#Difference > (333*60*60),"25m",\
#Difference > (250*60*60),"20m",\
#Difference > (166*60*60),"15m",\
#Difference > (66*60*60),"10m",\
#Difference <= (66*60*60),"5m"\
#)\
#| return span ]
#iseval = 0

# Inline version used in django views

#[inline_customspan_django]
#definition = head 1 | addinfo\
#| eval earliest=if(info_min_time == "0.000", info_search_time,info_min_time)\
#| eval latest=if(info_max_time == "+Infinity", info_search_time,info_max_time)\
#| eval searchStartTIme=strftime(earliest,"%a %d %B %Y %H:%M")\
#| eval searchEndTime=strftime(latest,"%a %d %B %Y %H:%M")\
#| eval Difference = (latest - earliest)\
#| eval span=case(\
#Difference > (3000*24*60*60),"4d",\
#Difference > (2000*24*60*60),"3d",\
#Difference > (1000*24*60*60),"2d",\
#Difference > (500*24*60*60),"1d",\
#Difference > (333*24*60*60),"12h",\
#Difference > (166*24*60*60),"8h",\
#Difference > (83*24*60*60),"4h",\
#Difference > (41*24*60*60),"2h",\
#Difference > (916*60*60),"1h",\
#Difference > (833*60*60),"55m",\
#Difference > (750*60*60),"50m",\
#Difference > (666*60*60),"45m",\
#Difference > (583*60*60),"40m",\
#Difference > (500*60*60),"35m",\
#Difference > (416*60*60),"30m",\
#Difference > (333*60*60),"25m",\
#Difference > (250*60*60),"20m",\
#Difference > (166*60*60),"15m",\
#Difference > (66*60*60),"10m",\
#Difference <= (66*60*60),"5m"\
#)
#iseval = 0




###############################################
#	Macro used in Compare interface
###############################################

[eval_compare]
definition = eval Evolution_usage=((usage_period2-usage_period1)/usage_period1)*100 | eval Evolution_usage=round(Evolution_usage,2)\
| eval Delta_usage=round((usage_period2-usage_period1),2)\
| eval Evolution_pct_usage=case(isnotnull(pct_usage_period1), ((pct_usage_period2-pct_usage_period1)/pct_usage_period1)*100 ) | eval Evolution_pct_usage=round(Evolution_pct_usage,2)\
| eval Delta_pct_usage=round((pct_usage_period2-pct_usage_period1),2)\
| fields hostname,usage_period1,usage_period2,Delta_usage,Evolution_usage,*\
| rename Evolution_usage As "Evolution_usage (%)"\
| rename Evolution_pct_usage As "Evolution_pct_usage (%)"
iseval = 0


###################################
# 	Index Datestate
###################################

[indexes_datestats]

definition = metadata type=sourcetypes index="nmon" | setfields index="nmon" | eval "First Event"=strftime(firstTime,"%d/%m/%Y %H:%M") | eval "Last Event"=strftime(lastTime,"%d/%m/%Y %H:%M") | fields index,sourcetype,*Event
iseval = 0

###################################
# 	Eval Memory
###################################

[MEM_eval]
definition = eval Real_used_MB=round((Real_total_MB-Real_free_MB),1)\
| eval Virtual_total_MB=round((Virtual_total_MB),1)\
| eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),1)\
| eval memused=round((memtotal-memfree),1)\
| eval swapused=round((swaptotal-swapfree),1)\
| eval Real_used_PCT=round(((Real_used_MB/Real_total_MB)*100),1)\
| eval Virtual_used_PCT=round(((Virtual_used_MB/Virtual_total_MB)*100),1)\
| eval memfree_PCT=round(((memfree/memtotal)*100),1)\
| eval memused_PCT=round(((memused/memtotal)*100),1)\
| eval swapfree_PCT=round(((swapfree/swaptotal)*100),1)\
| eval swapused_PCT=round(((swapused/swaptotal)*100),1)\
| stats \
max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB,\
max(memtotal) As memtotal, max(memused) As memused,\
max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB, \
max(swaptotal) As swaptotal, max(swapused) As swapused\
max(Real_Free_PCT) As Real_Free_PCT,\
max(memfree_PCT) As memfree_PCT,\
max(Virtual_free_PCT) As Virtual_free_PCT,\
max(swapfree_PCT) As swapfree_PCT,\
max(Real_used_PCT) As Real_used_PCT,\
max(memused_PCT) As memused_PCT,\
max(Virtual_used_PCT) As Virtual_used_PCT,\
max(swapused_PCT) As swapused_PCT,\
max(buffers) As buffers, max(cached) As cached, max(inactive) As inactive\
by _time,hostname\
| eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal)\
| eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused)\
| eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal) \
| eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused)\
| eval Real_Free_PCT=if(isnotnull(Real_Free_PCT),Real_Free_PCT,memfree_PCT)\
| eval Virtual_free_PCT=if(isnotnull(Virtual_free_PCT),Virtual_free_PCT,swapfree_PCT)\
| eval Real_used_PCT=if(isnotnull(Real_used_PCT),Real_used_PCT,memused_PCT)\
| eval Virtual_used_PCT=if(isnotnull(Virtual_used_PCT),Virtual_used_PCT,swapused_PCT)
iseval = 0



###################################
# 	Based search for NMON Config which initializes some useful fields using regex
###################################

[nmon_config]
definition = index=nmon sourcetype=nmon_config | rex "(?i),host,(?P<hostname>.+)" | rex "(?i),OS,(?P<OS>[^,]+)" | rex "AAA,AIX,(?P<AIX_LEVEL>.+)"
iseval = 0


###################################
# 	Based search for NMON Config inventory
###################################

[nmon_config_inventory]
definition = index=nmon sourcetype=nmon_config\
| rex "(?i),host,(?P<hostname>.+)"\
| rex "(?i),OS,(?P<OS>[^,]+)"\
| rex "AAA,AIX,(?P<AIX_LEVEL>.+)"\
| search hostname=*\
| rex "(?i),version,(?P<nmon_version>.+)"\
| rex "(?i),command,(?P<nmon_command>.+)"\
| fillnull value="NA"\
| stats count by hostname,OS,AIX_LEVEL,nmon_version\
| eval OStype=case(OS == "Linux", "Linux", OS == "Solaris", "Solaris", OS =="NA", "AIX")\
| fields hostname,OStype,nmon_version,AIX_LEVEL
iseval = 0

