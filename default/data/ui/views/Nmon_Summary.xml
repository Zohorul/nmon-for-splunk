<form stylesheet="standard.css,singlevalue.css,ui_simple.css,hide_timeindicator.css" script="link_switcher.js, autodiscover.js">
  <label>NMON Light Analysis</label>
  <fieldset autoRun="false" submitButton="false">
    <input type="time" token="timerange" searchWhenChanged="true">
      <label>Time Range:</label>
      <default>
        <earliestTime>-24h</earliestTime>
        <latestTime>now</latestTime>
      </default>
    </input>
    <input type="radio" token="osfilter" searchWhenChanged="true">
      <label>Filter OS Type:</label>
      <default/>
      <choice value="">Any OS</choice>
      <choice value="| search [ `nmon_inventory` | search OStype=AIX | stats count by hostname | fields hostname ]">AIX</choice>
      <choice value="| search [ `nmon_inventory` | search OStype=Linux | stats count by hostname | fields hostname ]">Linux</choice>
      <choice value="| search [ `nmon_inventory` | search OStype=Solaris | stats count by hostname | fields hostname ]">Solaris</choice>
    </input>
    <input type="text" token="hostname-prefilter" searchWhenChanged="true">
      <label>Optional: Filter hosts</label>
      <prefix>hostname="</prefix>
      <suffix>"</suffix>
      <default>*</default>
    </input>
    <input type="dropdown" token="hostname" searchWhenChanged="true">
      <label>Select a Host:</label>
      <prefix>hostname="</prefix>
      <suffix>"</suffix>
      <populatingSearch earliest="$timerange.earliest$" latest="$timerange.latest$" fieldForLabel="hostname" fieldForValue="hostname">index=nmon sourcetype=nmon_data type=CPU_ALL OR type=LPAR $hostname-prefilter$ | stats count by hostname | dedup hostname | sort hostname $osfilter$</populatingSearch>
    </input>
  </fieldset>
  <searchTemplate>index=nmon sourcetype=nmon_config | rex "(?i),host,(?P&lt;hostname&gt;.+)" | dedup hostname | search $hostname$ | `nmon_config_rex`</searchTemplate>
  <earliestTime>$timerange.earliest$</earliestTime>
  <latestTime>$timerange.latest$</latestTime>
  <row>
    <panel>
      <html>
        <h3>Operating System</h3>
      </html>
      <single>
        <searchPostProcess>stats values(OStype) As OStype</searchPostProcess>
        <option name="drilldown">none</option>
        <option name="underLabel">Operating System</option>
        <option name="linkView">search</option>
      </single>
      <single>
        <searchPostProcess>stats values(OS_Level) As OS_Level</searchPostProcess>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Operating System Level</option>
        <option name="linkView">search</option>
      </single>
    </panel>
    <panel>
      <html>
        <h3>Processor Configuration</h3>
      </html>
      <single>
        <searchPostProcess>stats values(cpu_cores) As cpu_cores</searchPostProcess>
        <option name="drilldown">none</option>
        <option name="underLabel">Virtual Proc / Logical Cores</option>
        <option name="linkView">search</option>
      </single>
      <single>
        <searchPostProcess>stats values(Processor) As Processor</searchPostProcess>
        <option name="drilldown">none</option>
        <option name="underLabel">Processor Type</option>
        <option name="linkView">search</option>
      </single>
    </panel>
    <panel>
      <html>
        <h3>Memory Configuration</h3>
      </html>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="MEM" $hostname$ | eval Real_used_MB=round((Real_total_MB-Real_free_MB),0) | head 100 | eval Virtual_total_MB=round((Virtual_total_MB),0) | eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),0) | eval memused=round((memtotal-memfree),0) | eval swapused=round((swaptotal-swapfree),0) | stats  max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB, max(memtotal) As memtotal, max(memused) As memused, max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB,  max(swaptotal) As swaptotal, max(swapused) As swapused by _time,hostname | eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal) | eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused) | eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal)  | eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused) | stats latest(Real_total_MB) As Real_total_MB, latest(Virtual_total_MB) As Virtual_total_MB | eval Real_total_MB=round(Real_total_MB,0) | fields Real_total_MB</searchString>
        <earliestTime>$earliest$</earliestTime>
        <latestTime>$latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Total Memory</option>
        <option name="linkView">search</option>
        <option name="afterLabel">MB</option>
      </single>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="MEM" $hostname$ | eval Real_used_MB=round((Real_total_MB-Real_free_MB),0) | head 100 | eval Virtual_total_MB=round((Virtual_total_MB),0) | eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),0) | eval memused=round((memtotal-memfree),0) | eval swapused=round((swaptotal-swapfree),0) | stats  max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB, max(memtotal) As memtotal, max(memused) As memused, max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB,  max(swaptotal) As swaptotal, max(swapused) As swapused by _time,hostname | eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal) | eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused) | eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal)  | eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused) | stats latest(Real_total_MB) As Real_total_MB, latest(Virtual_total_MB) As Virtual_total_MB | eval Virtual_total_MB=round(Virtual_total_MB,0) | fields Virtual_total_MB</searchString>
        <earliestTime>$earliest$</earliestTime>
        <latestTime>$latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Total Paging Space</option>
        <option name="linkView">search</option>
        <option name="afterLabel">MB</option>
      </single>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h3>CPU Usage Statistics</h3>
      </html>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="CPU_ALL" OR type="LPAR" $hostname$
| stats count by type | sort - type | head 1
          | eval datasource=case(match(type, "LPAR"), "LPAR (VP usage)", match(type, "CPU_ALL"), "CPU_ALL (% usage)") | stats values(datasource) As datasource</searchString>
		<earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">CPU datasource</option>
        <option name="linkView">search</option>
      </single>      
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="CPU_ALL" OR type="LPAR" $hostname$ | eval lpar_vpconso=round(((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT)*virtualCPUs/100),2)  | eval cpu_pctconso=(Sys_PCT+User_PCT+Wait_PCT) | stats values(lpar_vpconso) As lpar_vpconso, values(cpu_pctconso) As cpu_pctconso by _time,hostname | eval conso=if(isnotnull(lpar_vpconso),lpar_vpconso,cpu_pctconso) | stats avg(conso) As "avg_CPU_Usage" | eval  avg_CPU_Usage=round(avg_CPU_Usage,3)</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Average CPU Usage</option>
        <option name="linkView">search</option>
        <option name="afterLabel">% or VP</option>
      </single>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="CPU_ALL" OR type="LPAR" $hostname$ | eval lpar_vpconso=round(((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT)*virtualCPUs/100),2)  | eval cpu_pctconso=(Sys_PCT+User_PCT+Wait_PCT) | stats values(lpar_vpconso) As lpar_vpconso, values(cpu_pctconso) As cpu_pctconso by _time,hostname | eval conso=if(isnotnull(lpar_vpconso),lpar_vpconso,cpu_pctconso) | stats max(conso) As "max_CPU_Usage"</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Max CPU Usage</option>
        <option name="linkView">search</option>
        <option name="afterLabel">% or VP</option>
      </single>
      <chart>
        <searchString>index="nmon" sourcetype="nmon_data" type="CPU_ALL" OR type="LPAR" $hostname$
| eval lpar_vpconso=round(((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT)*virtualCPUs/100),2) 
| eval cpu_pctconso=(Sys_PCT+User_PCT+Wait_PCT)
| stats values(lpar_vpconso) As lpar_vpconso, values(cpu_pctconso) As cpu_pctconso by _time,hostname
| eval conso=if(isnotnull(lpar_vpconso),lpar_vpconso,cpu_pctconso)
| timechart `inline_customspan(type=CPU_ALL OR type=LPAR,$hostname$)` max(conso) As "Max CPU Usage", avg(conso) As "Avg CPU Usage"</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="charting.axisTitleX.visibility">visible</option>
        <option name="charting.axisTitleY.visibility">visible</option>
        <option name="charting.axisX.scale">linear</option>
        <option name="charting.axisY.scale">linear</option>
        <option name="charting.chart">line</option>
        <option name="charting.chart.nullValueMode">gaps</option>
        <option name="charting.chart.sliceCollapsingThreshold">0.01</option>
        <option name="charting.chart.stackMode">unstacked</option>
        <option name="charting.chart.style">shiny</option>
        <option name="charting.drilldown">all</option>
        <option name="charting.layout.splitSeries">0</option>
        <option name="charting.legend.labelStyle.overflowMode">ellipsisMiddle</option>
        <option name="charting.legend.placement">bottom</option>
        <option name="height">350px</option>
        <option name="charting.axisTitleX.text">Time</option>
        <option name="charting.axisTitleY.text">CPU Usage</option>
        <option name="charting.axisY.minimumNumber">0</option>
      </chart>
    </panel>
    <panel>
      <html>
        <h3>I/O Operations per second</h3>
      </html>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="DISKXFER*" $hostname$ | stats sum(value) As iosec by _time,hostname | stats avg(iosec) As avg_iosec | eval avg_iosec=round(avg_iosec,0)</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Average I/O stats</option>
        <option name="linkView">search</option>
        <option name="afterLabel">iops</option>
      </single>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="DISKXFER*" $hostname$ | stats sum(value) As iosec by _time,hostname | stats max(iosec) As max_iosec | eval max_iosec=round(max_iosec,0)</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Max I/O stats</option>
        <option name="linkView">search</option>
        <option name="afterLabel">iops</option>
      </single>
      <chart>
        <searchString>index="nmon" sourcetype="nmon_data" type="DISKXFER*" $hostname$
| stats sum(value) As iosec by _time,hostname
| timechart `inline_customspan(type=DISKXFER,$hostname$)` max(iosec) As "Total I/O"</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="charting.axisTitleX.visibility">visible</option>
        <option name="charting.axisTitleY.visibility">visible</option>
        <option name="charting.axisX.scale">linear</option>
        <option name="charting.axisY.scale">linear</option>
        <option name="charting.chart">line</option>
        <option name="charting.chart.nullValueMode">gaps</option>
        <option name="charting.chart.sliceCollapsingThreshold">0.01</option>
        <option name="charting.chart.stackMode">unstacked</option>
        <option name="charting.chart.style">shiny</option>
        <option name="charting.drilldown">all</option>
        <option name="charting.layout.splitSeries">0</option>
        <option name="charting.legend.labelStyle.overflowMode">ellipsisMiddle</option>
        <option name="charting.legend.placement">bottom</option>
        <option name="height">350px</option>
        <option name="charting.axisTitleX.text">Time</option>
        <option name="charting.axisTitleY.text">I/O per second</option>
        <option name="charting.axisY.minimumNumber">0</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h3>Memory Statistics</h3>
      </html>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="MEM" $hostname$ | eval Real_used_MB=round((Real_total_MB-Real_free_MB),1) | eval Virtual_total_MB=round((Virtual_total_MB),1) | eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),1) | eval memused=round((memtotal-memfree),1) | eval swapused=round((swaptotal-swapfree),1) | eval Real_used_PCT=round(((Real_used_MB/Real_total_MB)*100),1) | eval Virtual_used_PCT=round(((Virtual_used_MB/Virtual_total_MB)*100),1) | eval memfree_PCT=round(((memfree/memtotal)*100),1) | eval memused_PCT=round(((memused/memtotal)*100),1) | eval swapfree_PCT=round(((swapfree/swaptotal)*100),1) | eval swapused_PCT=round(((swapused/swaptotal)*100),1) | stats  max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB, max(memtotal) As memtotal, max(memused) As memused, max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB,  max(swaptotal) As swaptotal, max(swapused) As swapused max(Real_Free_PCT) As Real_Free_PCT, max(memfree_PCT) As memfree_PCT, max(Virtual_free_PCT) As Virtual_free_PCT, max(swapfree_PCT) As swapfree_PCT, max(Real_used_PCT) As Real_used_PCT, max(memused_PCT) As memused_PCT, max(Virtual_used_PCT) As Virtual_used_PCT, max(swapused_PCT) As swapused_PCT by _time,hostname | eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal) | eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused) | eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal)  | eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused) | eval Real_Free_PCT=if(isnotnull(Real_Free_PCT),Real_Free_PCT,memfree_PCT) | eval Virtual_free_PCT=if(isnotnull(Virtual_free_PCT),Virtual_free_PCT,swapfree_PCT) | eval Real_used_PCT=if(isnotnull(Real_used_PCT),Real_used_PCT,memused_PCT) | eval Virtual_used_PCT=if(isnotnull(Virtual_used_PCT),Virtual_used_PCT,swapused_PCT) | stats avg(Real_used_PCT) As avg_Real_used_PCT | eval avg_Real_used_PCT=round(avg_Real_used_PCT,0)</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Average RealMem Usage</option>
        <option name="linkView">search</option>
        <option name="afterLabel">%</option>
      </single>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="MEM" $hostname$ | eval Real_used_MB=round((Real_total_MB-Real_free_MB),1) | eval Virtual_total_MB=round((Virtual_total_MB),1) | eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),1) | eval memused=round((memtotal-memfree),1) | eval swapused=round((swaptotal-swapfree),1) | eval Real_used_PCT=round(((Real_used_MB/Real_total_MB)*100),1) | eval Virtual_used_PCT=round(((Virtual_used_MB/Virtual_total_MB)*100),1) | eval memfree_PCT=round(((memfree/memtotal)*100),1) | eval memused_PCT=round(((memused/memtotal)*100),1) | eval swapfree_PCT=round(((swapfree/swaptotal)*100),1) | eval swapused_PCT=round(((swapused/swaptotal)*100),1) | stats  max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB, max(memtotal) As memtotal, max(memused) As memused, max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB,  max(swaptotal) As swaptotal, max(swapused) As swapused max(Real_Free_PCT) As Real_Free_PCT, max(memfree_PCT) As memfree_PCT, max(Virtual_free_PCT) As Virtual_free_PCT, max(swapfree_PCT) As swapfree_PCT, max(Real_used_PCT) As Real_used_PCT, max(memused_PCT) As memused_PCT, max(Virtual_used_PCT) As Virtual_used_PCT, max(swapused_PCT) As swapused_PCT by _time,hostname | eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal) | eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused) | eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal)  | eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused) | eval Real_Free_PCT=if(isnotnull(Real_Free_PCT),Real_Free_PCT,memfree_PCT) | eval Virtual_free_PCT=if(isnotnull(Virtual_free_PCT),Virtual_free_PCT,swapfree_PCT) | eval Real_used_PCT=if(isnotnull(Real_used_PCT),Real_used_PCT,memused_PCT) | eval Virtual_used_PCT=if(isnotnull(Virtual_used_PCT),Virtual_used_PCT,swapused_PCT) | stats max(Real_used_PCT) As max_Real_used_PCT | eval max_Real_used_PCT=round(max_Real_used_PCT,0)</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Max RealMem Usage</option>
        <option name="linkView">search</option>
        <option name="afterLabel">%</option>
      </single>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="MEM" $hostname$ | eval Real_used_MB=round((Real_total_MB-Real_free_MB),1) | eval Virtual_total_MB=round((Virtual_total_MB),1) | eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),1) | eval memused=round((memtotal-memfree),1) | eval swapused=round((swaptotal-swapfree),1) | eval Real_used_PCT=round(((Real_used_MB/Real_total_MB)*100),1) | eval Virtual_used_PCT=round(((Virtual_used_MB/Virtual_total_MB)*100),1) | eval memfree_PCT=round(((memfree/memtotal)*100),1) | eval memused_PCT=round(((memused/memtotal)*100),1) | eval swapfree_PCT=round(((swapfree/swaptotal)*100),1) | eval swapused_PCT=round(((swapused/swaptotal)*100),1) | stats  max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB, max(memtotal) As memtotal, max(memused) As memused, max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB,  max(swaptotal) As swaptotal, max(swapused) As swapused max(Real_Free_PCT) As Real_Free_PCT, max(memfree_PCT) As memfree_PCT, max(Virtual_free_PCT) As Virtual_free_PCT, max(swapfree_PCT) As swapfree_PCT, max(Real_used_PCT) As Real_used_PCT, max(memused_PCT) As memused_PCT, max(Virtual_used_PCT) As Virtual_used_PCT, max(swapused_PCT) As swapused_PCT by _time,hostname | eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal) | eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused) | eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal)  | eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused) | eval Real_Free_PCT=if(isnotnull(Real_Free_PCT),Real_Free_PCT,memfree_PCT) | eval Virtual_free_PCT=if(isnotnull(Virtual_free_PCT),Virtual_free_PCT,swapfree_PCT) | eval Real_used_PCT=if(isnotnull(Real_used_PCT),Real_used_PCT,memused_PCT) | eval Virtual_used_PCT=if(isnotnull(Virtual_used_PCT),Virtual_used_PCT,swapused_PCT) | stats avg(Virtual_used_PCT) As avg_Virtual_used_PCT | eval avg_Virtual_used_PCT=round(avg_Virtual_used_PCT,0)</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Average Virtual Mem Usage</option>
        <option name="linkView">search</option>
        <option name="afterLabel">%</option>
      </single>
      <single>
        <searchString>index="nmon" sourcetype="nmon_data" type="MEM" $hostname$ | eval Real_used_MB=round((Real_total_MB-Real_free_MB),1) | eval Virtual_total_MB=round((Virtual_total_MB),1) | eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),1) | eval memused=round((memtotal-memfree),1) | eval swapused=round((swaptotal-swapfree),1) | eval Real_used_PCT=round(((Real_used_MB/Real_total_MB)*100),1) | eval Virtual_used_PCT=round(((Virtual_used_MB/Virtual_total_MB)*100),1) | eval memfree_PCT=round(((memfree/memtotal)*100),1) | eval memused_PCT=round(((memused/memtotal)*100),1) | eval swapfree_PCT=round(((swapfree/swaptotal)*100),1) | eval swapused_PCT=round(((swapused/swaptotal)*100),1) | stats  max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB, max(memtotal) As memtotal, max(memused) As memused, max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB,  max(swaptotal) As swaptotal, max(swapused) As swapused max(Real_Free_PCT) As Real_Free_PCT, max(memfree_PCT) As memfree_PCT, max(Virtual_free_PCT) As Virtual_free_PCT, max(swapfree_PCT) As swapfree_PCT, max(Real_used_PCT) As Real_used_PCT, max(memused_PCT) As memused_PCT, max(Virtual_used_PCT) As Virtual_used_PCT, max(swapused_PCT) As swapused_PCT by _time,hostname | eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal) | eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused) | eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal)  | eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused) | eval Real_Free_PCT=if(isnotnull(Real_Free_PCT),Real_Free_PCT,memfree_PCT) | eval Virtual_free_PCT=if(isnotnull(Virtual_free_PCT),Virtual_free_PCT,swapfree_PCT) | eval Real_used_PCT=if(isnotnull(Real_used_PCT),Real_used_PCT,memused_PCT) | eval Virtual_used_PCT=if(isnotnull(Virtual_used_PCT),Virtual_used_PCT,swapused_PCT) | stats max(Virtual_used_PCT) As max_Virtual_used_PCT | eval max_Virtual_used_PCT=round(max_Virtual_used_PCT,0)</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Max Virtual Mem Usage</option>
        <option name="linkView">search</option>
        <option name="afterLabel">%</option>
      </single>
      <chart>
        <searchString>index="nmon" sourcetype="nmon_data" type="MEM" $hostname$
| eval Real_used_MB=round((Real_total_MB-Real_free_MB),1)
| eval Virtual_total_MB=round((Virtual_total_MB),1)
| eval Virtual_used_MB=round((Virtual_total_MB-Virtual_free_MB),1)
| eval memused=round((memtotal-memfree),1)
| eval swapused=round((swaptotal-swapfree),1)
| eval Real_used_PCT=round(((Real_used_MB/Real_total_MB)*100),1)
| eval Virtual_used_PCT=round(((Virtual_used_MB/Virtual_total_MB)*100),1)
| eval memfree_PCT=round(((memfree/memtotal)*100),1)
| eval memused_PCT=round(((memused/memtotal)*100),1)
| eval swapfree_PCT=round(((swapfree/swaptotal)*100),1)
| eval swapused_PCT=round(((swapused/swaptotal)*100),1)
| stats 
max(Real_total_MB) As Real_total_MB, max(Real_used_MB) As Real_used_MB,
max(memtotal) As memtotal, max(memused) As memused,
max(Virtual_total_MB) As Virtual_total_MB, max(Virtual_used_MB) As Virtual_used_MB, 
max(swaptotal) As swaptotal, max(swapused) As swapused
max(Real_Free_PCT) As Real_Free_PCT,
max(memfree_PCT) As memfree_PCT,
max(Virtual_free_PCT) As Virtual_free_PCT,
max(swapfree_PCT) As swapfree_PCT,
max(Real_used_PCT) As Real_used_PCT,
max(memused_PCT) As memused_PCT,
max(Virtual_used_PCT) As Virtual_used_PCT,
max(swapused_PCT) As swapused_PCT by _time,hostname
| eval Real_total_MB=if(isnotnull(Real_total_MB),Real_total_MB,memtotal)
| eval Real_used_MB=if(isnotnull(Real_used_MB),Real_used_MB,memused)
| eval Virtual_total_MB=if(isnotnull(Virtual_total_MB),Virtual_total_MB,swaptotal) 
| eval Virtual_used_MB=if(isnotnull(Virtual_used_MB),Virtual_used_MB,swapused)
| eval Real_Free_PCT=if(isnotnull(Real_Free_PCT),Real_Free_PCT,memfree_PCT)
| eval Virtual_free_PCT=if(isnotnull(Virtual_free_PCT),Virtual_free_PCT,swapfree_PCT)
| eval Real_used_PCT=if(isnotnull(Real_used_PCT),Real_used_PCT,memused_PCT)
| eval Virtual_used_PCT=if(isnotnull(Virtual_used_PCT),Virtual_used_PCT,swapused_PCT)
| timechart `inline_customspan(type=MEM,$hostname$)` max(Real_used_PCT) As Real_used_PCT, max(Virtual_used_PCT) As Virtual_used_PCT</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="charting.axisTitleX.visibility">visible</option>
        <option name="charting.axisTitleY.visibility">visible</option>
        <option name="charting.axisX.scale">linear</option>
        <option name="charting.axisY.scale">linear</option>
        <option name="charting.chart">line</option>
        <option name="charting.chart.nullValueMode">gaps</option>
        <option name="charting.chart.sliceCollapsingThreshold">0.01</option>
        <option name="charting.chart.stackMode">unstacked</option>
        <option name="charting.chart.style">shiny</option>
        <option name="charting.drilldown">all</option>
        <option name="charting.layout.splitSeries">0</option>
        <option name="charting.legend.labelStyle.overflowMode">ellipsisMiddle</option>
        <option name="charting.legend.placement">bottom</option>
        <option name="height">350px</option>
        <option name="charting.axisTitleX.text">Time</option>
        <option name="charting.axisTitleY.text">Percentage (%)</option>
        <option name="charting.axisY.minimumNumber">0</option>
        <option name="charting.axisY.maximumNumber">100</option>
      </chart>
    </panel>
    <panel>
      <html>
        <h3>Top 10 processes CPU Statistics</h3>
      </html>
      <single>
        <searchString>index=nmon sourcetype=nmon_data type=TOP $hostname$ | dedup _time,pct_CPU,PID,Command,hostname
| eval limit=(logical_cpus*100)
| where pct_CPU&lt;=limit
| stats sum(pct_CPU) As pct_CPU,last(logical_cpus) As logical_cpus by _time,Command
| eval smt_threads=(logical_cpus/virtual_cpus)
| eval pct_CPU=case(isnotnull(smt_threads) AND smt_threads&gt;="2", pct_CPU*1.2, isnotnull(smt_threads) AND smt_threads&gt;="4", pct_CPU*1.4, isnull(smt_threads), pct_CPU)
| eval conso_per_core=(pct_CPU/100)
| stats sum(conso_per_core) As conso_per_core by _time,Command
| stats avg(conso_per_core) as avg_conso_per_core by Command
| sort - avg_conso_per_core 
| head 1 | fields Command</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">TOP Process</option>
        <option name="linkView">search</option>
        <option name="beforeLabel">Command</option>
      </single>
      <single>
        <searchString>index=nmon sourcetype=nmon_data type=TOP $hostname$ | dedup _time,pct_CPU,PID,Command,hostname
| eval limit=(logical_cpus*100) 
| where pct_CPU&lt;=limit 
| stats sum(pct_CPU) As pct_CPU,last(logical_cpus) As logical_cpus by _time,Command
| eval smt_threads=(logical_cpus/virtual_cpus)
| eval pct_CPU=case(isnotnull(smt_threads) AND smt_threads&gt;="2", pct_CPU*1.2, isnotnull(smt_threads) AND smt_threads&gt;="4", pct_CPU*1.4, isnull(smt_threads), pct_CPU)
| eval conso_per_core=(pct_CPU/100)
| stats sum(conso_per_core) As conso_per_core by _time,Command
| stats avg(conso_per_core) as avg_conso_per_core by Command
| sort - avg_conso_per_core
| eval avg_conso_per_core=round(avg_conso_per_core,3)
| head 1 | fields avg_conso_per_core</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Average Conso for this Command</option>
        <option name="linkView">search</option>
        <option name="beforeLabel">core conso</option>
      </single>
      <single>
        <searchString>index=nmon sourcetype=nmon_data type=TOP $hostname$ | dedup _time,pct_CPU,PID,Command,hostname
| eval limit=(logical_cpus*100)
| where pct_CPU&lt;=limit 
| stats sum(pct_CPU) As pct_CPU,last(logical_cpus) As logical_cpus by _time,Command
| eval smt_threads=(logical_cpus/virtual_cpus)
| eval pct_CPU=case(isnotnull(smt_threads) AND smt_threads&gt;="2", pct_CPU*1.2, isnotnull(smt_threads) AND smt_threads&gt;="4", pct_CPU*1.4, isnull(smt_threads), pct_CPU)
| eval conso_per_core=(pct_CPU/100)
| stats sum(conso_per_core) As conso_per_core by _time,Command
| stats avg(conso_per_core) as avg_conso_per_core, max(conso_per_core) as max_conso_per_core by Command
| sort - avg_conso_per_core
| eval max_conso_per_core=round(max_conso_per_core,3)
| head 1 | fields max_conso_per_core</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="drilldown">none</option>
        <option name="underLabel">Max Conso for this Command</option>
        <option name="linkView">search</option>
        <option name="beforeLabel">core conso</option>
      </single>
      <chart>
        <searchString>index=nmon sourcetype=nmon_data type=TOP $hostname$ | dedup _time,pct_CPU,PID,Command,hostname
| eval limit=(logical_cpus*100)
| where pct_CPU&lt;=limit      
| stats sum(pct_CPU) As pct_CPU,last(logical_cpus) As logical_cpus by _time,Command
| eval smt_threads=(logical_cpus/virtual_cpus)
| eval pct_CPU=case(isnotnull(smt_threads) AND smt_threads&gt;="2", pct_CPU*1.2, isnotnull(smt_threads) AND smt_threads&gt;="4", pct_CPU*1.4, isnull(smt_threads), pct_CPU)
| eval conso_per_core=(pct_CPU/100)
| stats sum(conso_per_core) As conso_per_core by _time,Command
| timechart `inline_customspan(type=TOP,$hostname$)` useother=f limit=10
max(conso_per_core) as "CPU Usage per core" by Command</searchString>
        <earliestTime>$timerange.earliest$</earliestTime>
        <latestTime>$timerange.latest$</latestTime>
        <option name="charting.axisTitleX.visibility">visible</option>
        <option name="charting.axisTitleY.visibility">visible</option>
        <option name="charting.axisX.scale">linear</option>
        <option name="charting.axisY.scale">linear</option>
        <option name="charting.chart">area</option>
        <option name="charting.chart.nullValueMode">stacked</option>
        <option name="charting.chart.sliceCollapsingThreshold">0.01</option>
        <option name="charting.chart.stackMode">stacked</option>
        <option name="charting.chart.style">shiny</option>
        <option name="charting.drilldown">all</option>
        <option name="charting.layout.splitSeries">0</option>
        <option name="charting.legend.labelStyle.overflowMode">ellipsisMiddle</option>
        <option name="charting.legend.placement">bottom</option>
        <option name="height">350px</option>
        <option name="charting.axisTitleX.text">Time</option>
        <option name="charting.axisY.minimumNumber">0</option>
        <option name="charting.axisTitleY.text">Logical Core</option>
      </chart>
    </panel>
  </row>
</form>